<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_92-_value_object_model_2_intrinsics_2_functions_2_binary_8cs" kind="file" language="C#">
    <compoundname>Binary.cs</compoundname>
    <innerclass refid="class_element_1_1_a_s_t_1_1_binary" prot="public">Element::AST::Binary</innerclass>
    <innernamespace refid="namespace_element">Element</innernamespace>
    <innernamespace refid="namespace_element_1_1_a_s_t">Element::AST</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_element_1_1_a_s_t" kindref="compound">Element.AST</ref></highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10" refid="class_element_1_1_a_s_t_1_1_binary" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>sealed<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_element_1_1_a_s_t_1_1_binary" kindref="compound">Binary</ref><sp/>:<sp/><ref refid="class_element_1_1_a_s_t_1_1_intrinsic_value" kindref="compound">IntrinsicValue</ref>,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_intrinsic_function_implementation" kindref="compound">IIntrinsicFunctionImplementation</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_a_s_t_1_1_binary" kindref="compound">Binary</ref>()</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instances<sp/>=<sp/>Enum.GetValues(typeof(<ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="class_element_1_1_binary" kindref="compound">Binary</ref>.Op))</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Cast&lt;<ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="class_element_1_1_binary" kindref="compound">Binary</ref>.Op&gt;()</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Select(o<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_a_s_t_1_1_binary" kindref="compound">Binary</ref>(o))</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ToDictionary(i<sp/>=&gt;<sp/>i.Operation);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IReadOnlyDictionary&lt;<ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="class_element_1_1_binary" kindref="compound">Binary</ref>.Op,<sp/><ref refid="class_element_1_1_a_s_t_1_1_binary" kindref="compound">Binary</ref>&gt;<sp/>Instances<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_a_s_t_1_1_binary" kindref="compound">Binary</ref>(<ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="class_element_1_1_binary" kindref="compound">Binary</ref>.Op<sp/>operation)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operation<sp/>=<sp/>operation;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>(operation.ToString().ToLowerInvariant());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="class_element_1_1_binary" kindref="compound">Binary</ref>.Op<sp/>Operation<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>Call(IReadOnlyList&lt;IValue&gt;<sp/>arguments,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;<sp/><ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="class_element_1_1_binary" kindref="compound">Binary</ref>.CreateAndOptimize(Operation,<sp/>(<ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="class_element_1_1_instruction" kindref="compound">Instruction</ref>)<sp/>arguments[0],<sp/>(<ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="class_element_1_1_instruction" kindref="compound">Instruction</ref>)<sp/>arguments[1]);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsVariadic<sp/>=&gt;<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/Element.NET/!2-ValueObjectModel/Intrinsics/Functions/Binary.cs"/>
  </compounddef>
</doxygen>
