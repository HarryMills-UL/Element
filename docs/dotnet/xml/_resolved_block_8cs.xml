<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_resolved_block_8cs" kind="file" language="C#">
    <compoundname>ResolvedBlock.cs</compoundname>
    <innerclass refid="class_element_1_1_a_s_t_1_1_resolved_block" prot="public">Element::AST::ResolvedBlock</innerclass>
    <innernamespace refid="namespace_element">Element</innernamespace>
    <innernamespace refid="namespace_element_1_1_a_s_t">Element::AST</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_element_1_1_a_s_t" kindref="compound">Element.AST</ref></highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7" refid="class_element_1_1_a_s_t_1_1_resolved_block" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_element_1_1_a_s_t_1_1_resolved_block" kindref="compound">ResolvedBlock</ref><sp/>:<sp/><ref refid="class_element_1_1_a_s_t_1_1_value" kindref="compound">Value</ref>,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/>Func&lt;IScope,<sp/>Identifier,<sp/>Context,<sp/>Result&lt;IValue&gt;&gt;<sp/>_indexFunc;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/>Dictionary&lt;Identifier,<sp/>Result&lt;IValue&gt;&gt;<sp/>_resultCache;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_a_s_t_1_1_resolved_block" kindref="compound">ResolvedBlock</ref>(IReadOnlyList&lt;Identifier&gt;<sp/>allMembers,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IEnumerable&lt;(<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_value" kindref="compound">IValue</ref><sp/><ref refid="class_element_1_1_a_s_t_1_1_value" kindref="compound">Value</ref>)&gt;<sp/>resolvedValues,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Func&lt;<ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref>,<sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref>,<sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref>&gt;<sp/>indexFunc,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref>?<sp/>parent)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Members<sp/>=<sp/>allMembers;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_indexFunc<sp/>=<sp/>indexFunc;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_resultCache<sp/>=<sp/>resolvedValues.ToDictionary(t<sp/>=&gt;<sp/>t.Identifier,<sp/>t<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref>(t.Value));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_a_s_t_1_1_resolved_block" kindref="compound">ResolvedBlock</ref>(IReadOnlyList&lt;(<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_value" kindref="compound">IValue</ref><sp/><ref refid="class_element_1_1_a_s_t_1_1_value" kindref="compound">Value</ref>)&gt;<sp/>resolvedValues,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref>?<sp/>parent)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight><highlight class="keyword">this</highlight><highlight class="normal">(resolvedValues.Select(m<sp/>=&gt;<sp/>m.Identifier).ToArray(),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolvedValues,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(resolvedBlock,<sp/>id,<sp/>context)<sp/>=&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>(foundId,<sp/>value)<sp/>=<sp/>resolvedValues.FirstOrDefault(m<sp/>=&gt;<sp/>m.Identifier.Equals(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!foundId.Equals(</highlight><highlight class="keywordflow">default</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref>(value)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>context.Trace(MessageCode.IdentifierNotFound,<sp/>$</highlight><highlight class="stringliteral">&quot;&apos;{id}&apos;<sp/>not<sp/>found<sp/>when<sp/>indexing<sp/>{resolvedBlock}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>parent)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>Index(<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_resultCache.TryGetValue(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>out<sp/>var<sp/>result)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>result</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_resultCache[id]<sp/>=<sp/>_indexFunc(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>context);<sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>result<sp/>from<sp/>calling<sp/>the<sp/>index<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>Lookup(<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>context)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ElseIf(Parent<sp/>!=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>()<sp/>=&gt;<sp/>Parent!.Lookup(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>context));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>IReadOnlyList&lt;Identifier&gt;<sp/>Members<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref>?<sp/>Parent<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Serialize(<ref refid="class_element_1_1_result_builder" kindref="compound">ResultBuilder</ref>&lt;<ref refid="class_element_1_1_a_s_t_1_1_list" kindref="compound">List&lt;Element.Instruction&gt;</ref>&gt;<sp/>resultBuilder,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>member<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>Members)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultBuilder.Append(Index(member,<sp/>context)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Then(v<sp/>=&gt;<sp/>v.Serialize(resultBuilder,<sp/>context)));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>Deserialize(Func&lt;Element.Instruction&gt;<sp/>nextValue,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeserializeMembers(nextValue,<sp/>context)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Map(memberValues<sp/>=&gt;<sp/>(<ref refid="interface_element_1_1_a_s_t_1_1_i_value" kindref="compound">IValue</ref>)</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_a_s_t_1_1_resolved_block" kindref="compound">ResolvedBlock</ref>(memberValues.Zip(Members,<sp/>(value,<sp/>identifier)<sp/>=&gt;<sp/>(identifier,<sp/>value)).ToArray(),<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IEnumerable&lt;IValue&gt;</ref>&gt;<sp/>DeserializeMembers(Func&lt;Element.Instruction&gt;<sp/>nextValue,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Members.Select(m<sp/>=&gt;<sp/>Index(m,<sp/>context))</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.BindEnumerable(resolvedMembers<sp/>=&gt;<sp/>resolvedMembers.Select(m<sp/>=&gt;<sp/>m.Deserialize(nextValue,<sp/>context)).ToResultEnumerable());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/Element.NET/!2-ValueObjectModel/Values/ResolvedBlock.cs"/>
  </compounddef>
</doxygen>
