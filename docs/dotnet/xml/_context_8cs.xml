<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_context_8cs" kind="file" language="C#">
    <compoundname>Context.cs</compoundname>
    <innerclass refid="class_element_1_1_context" prot="public">Element::Context</innerclass>
    <innerclass refid="class_element_1_1_context_1_1_no_scope" prot="private">Element::Context::NoScope</innerclass>
    <innernamespace refid="namespace_element">Element</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_element" kindref="compound">Element</ref>.<ref refid="namespace_element_1_1_a_s_t" kindref="compound">AST</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_element" kindref="compound">Element</ref></highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9" refid="class_element_1_1_context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_element_1_1_context" kindref="compound">Context</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NoScope<sp/>:<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>_scopelessContext;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>NoScope(<ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>scopelessContext)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_scopelessContext<sp/>=<sp/>scopelessContext;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>Lookup(<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_internal_compiler_exception" kindref="compound">InternalCompilerException</ref>($</highlight><highlight class="stringliteral">&quot;Context<sp/>&apos;{_scopelessContext}&apos;<sp/>has<sp/>no<sp/>root<sp/>scope,<sp/>performing<sp/>lookup<sp/>is<sp/>not<sp/>possible&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref>(<ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref>?<sp/>rootScope,<sp/><ref refid="struct_element_1_1_compiler_options" kindref="compound">CompilerOptions</ref>?<sp/>compilerOptions)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RootScope<sp/>=<sp/>rootScope<sp/>??<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>NoScope(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_element_1_1_compiler_options" kindref="compound">CompilerOptions</ref><sp/>=<sp/>compilerOptions.GetValueOrDefault();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref>(<ref refid="class_element_1_1_source_context" kindref="compound">SourceContext</ref><sp/>sourceContext)<sp/>:<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">(sourceContext.GlobalScope,<sp/>sourceContext.CompilerOptions)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>None<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref>(</highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref><sp/>RootScope<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_compiler_options" kindref="compound">CompilerOptions</ref><sp/><ref refid="struct_element_1_1_compiler_options" kindref="compound">CompilerOptions</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Stack&lt;TraceSite&gt;<sp/>TraceStack<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Stack&lt;TraceSite&gt;();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Stack&lt;IValue&gt;<sp/>CallStack<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Stack&lt;IValue&gt;();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Stack&lt;Declaration&gt;<sp/>DeclarationStack<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Stack&lt;Declaration&gt;();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>EvaluateExpression(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>expression,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref>?<sp/>scopeToEvaluateIn<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)<sp/>=&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser.Parse&lt;<ref refid="class_element_1_1_a_s_t_1_1_top_level_expression" kindref="compound">TopLevelExpression</ref>&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_source_info" kindref="compound">SourceInfo</ref>(</highlight><highlight class="stringliteral">&quot;&lt;input<sp/>expression&gt;&quot;</highlight><highlight class="normal">,<sp/>expression),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="struct_element_1_1_compiler_options" kindref="compound">CompilerOptions</ref>.NoParseTrace)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Map(tle<sp/>=&gt;<sp/>tle.Expression)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Check(expressionObject<sp/>=&gt;<sp/>expressionObject.Validate(</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Bind(expressionObject<sp/>=&gt;<sp/>expressionObject.ResolveExpression(scopeToEvaluateIn<sp/>??<sp/>RootScope,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_compiler_message" kindref="compound">CompilerMessage</ref>?<sp/>Trace(MessageCode<sp/>messageCode,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">?<sp/>contextString)<sp/>=&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="class_element_1_1_compiler_message" kindref="compound">CompilerMessage</ref>.TryGetMessageLevel(messageCode,<sp/>out<sp/>var<sp/>level),<sp/>level<sp/>&gt;=<sp/><ref refid="struct_element_1_1_compiler_options" kindref="compound">CompilerOptions</ref>.Verbosity)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_compiler_message" kindref="compound">CompilerMessage</ref>(messageCode,<sp/>contextString,<sp/>TraceStack),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>=&gt;<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>No<sp/>message<sp/>should<sp/>be<sp/>produced<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>_)<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_compiler_message" kindref="compound">CompilerMessage</ref>(</highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>MessageLevel.Error,<sp/>$</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>get<sp/>{nameof(MessageLevel)}<sp/>for<sp/>{messageCode}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_compiler_message" kindref="compound">CompilerMessage</ref><sp/>Trace(MessageLevel<sp/>messageLevel,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>message)<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_compiler_message" kindref="compound">CompilerMessage</ref>(</highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>messageLevel,<sp/>message,<sp/>TraceStack);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/Element.NET/CompilationUtilities/Context.cs"/>
  </compounddef>
</doxygen>
