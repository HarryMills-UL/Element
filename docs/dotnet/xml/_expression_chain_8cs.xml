<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_expression_chain_8cs" kind="file" language="C#">
    <compoundname>ExpressionChain.cs</compoundname>
    <innerclass refid="interface_element_1_1_a_s_t_1_1_i_expression_chain_start" prot="public">Element::AST::IExpressionChainStart</innerclass>
    <innerclass refid="class_element_1_1_a_s_t_1_1_expression_chain" prot="public">Element::AST::ExpressionChain</innerclass>
    <innerclass refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_sub_expression" prot="public">Element::AST::ExpressionChain::SubExpression</innerclass>
    <innerclass refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_call_expression" prot="public">Element::AST::ExpressionChain::CallExpression</innerclass>
    <innerclass refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_indexing_expression" prot="public">Element::AST::ExpressionChain::IndexingExpression</innerclass>
    <innernamespace refid="namespace_element">Element</innernamespace>
    <innernamespace refid="namespace_element_1_1_a_s_t">Element::AST</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Linq;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Lexico;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_element_1_1_a_s_t" kindref="compound">Element.AST</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8" refid="interface_element_1_1_a_s_t_1_1_i_expression_chain_start" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">interface<sp/></highlight><highlight class="normal"><ref refid="interface_element_1_1_a_s_t_1_1_i_expression_chain_start" kindref="compound">IExpressionChainStart</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>TraceString<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ReSharper<sp/>disable<sp/>once<sp/>ClassNeverInstantiated.Global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="class_element_1_1_a_s_t_1_1_expression_chain" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_element_1_1_a_s_t_1_1_expression_chain" kindref="compound">ExpressionChain</ref><sp/>:<sp/><ref refid="class_element_1_1_a_s_t_1_1_expression" kindref="compound">Expression</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ReSharper<sp/>disable<sp/>UnusedAutoPropertyAccessor.Local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>disable<sp/>8618</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[field:<sp/>Alternative(typeof(<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>),<sp/>typeof(<ref refid="class_element_1_1_constant" kindref="compound">Constant</ref>))]<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_expression_chain_start" kindref="compound">IExpressionChainStart</ref><sp/>LitOrId<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[field:<sp/>Optional]<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_a_s_t_1_1_list" kindref="compound">List&lt;SubExpression&gt;</ref>?<sp/>Expressions<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>restore<sp/>8618</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ReSharper<sp/>restore<sp/>UnusedAutoPropertyAccessor.Local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ToString()<sp/>=&gt;<sp/>$</highlight><highlight class="stringliteral">&quot;{LitOrId.TraceString}{(Expressions<sp/>!=<sp/>null<sp/>?<sp/>string.Concat(Expressions)<sp/>:<sp/>string.Empty)}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ValidateImpl(<ref refid="class_element_1_1_result_builder" kindref="compound">ResultBuilder</ref><sp/>builder,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>expr<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>Expressions<sp/>??<sp/>Enumerable.Empty&lt;<ref refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_sub_expression" kindref="compound">SubExpression</ref>&gt;())</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.Validate(builder,<sp/>context);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>ExpressionImpl(<ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref><sp/>parentScope,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LitOrId<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>start<sp/>of<sp/>the<sp/>list<sp/>is<sp/>an<sp/>identifier,<sp/>find<sp/>the<sp/>value<sp/>that<sp/>it<sp/>identifies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=&gt;<sp/>parentScope.Lookup(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>context).Map(v<sp/>=&gt;<sp/>v),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_element_1_1_constant" kindref="compound">Constant</ref><sp/>constant<sp/>=&gt;<sp/>constant,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/>=&gt;<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_internal_compiler_exception" kindref="compound">InternalCompilerException</ref>(</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>compile<sp/>expression<sp/>that<sp/>doesn&apos;t<sp/>start<sp/>with<sp/>literal<sp/>or<sp/>identifier<sp/>-<sp/>should<sp/>be<sp/>impossible&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Bind(previous<sp/>=&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>previousAsResult<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref>(previous);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>all<sp/>expressions<sp/>for<sp/>this<sp/>chain<sp/>if<sp/>there<sp/>are<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expressions?.Aggregate(previousAsResult,<sp/>ResolveSubExpression)<sp/>??<sp/>previousAsResult;<sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>no<sp/>subexpressions<sp/>just<sp/>return<sp/>what<sp/>we<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>ResolveSubExpression(<ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>previousResult,<sp/><ref refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_sub_expression" kindref="compound">SubExpression</ref><sp/>subExpr)<sp/>=&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousResult.Bind(previousResult<sp/>=&gt;<sp/>subExpr.ResolveSubExpression(previousResult,<sp/>parentScope,<sp/>context));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_sub_expression" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">abstract</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_sub_expression" kindref="compound">SubExpression</ref><sp/>:<sp/><ref refid="class_element_1_1_a_s_t_1_1_ast_node" kindref="compound">AstNode</ref></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>ResolveSubExpression(<ref refid="interface_element_1_1_a_s_t_1_1_i_value" kindref="compound">IValue</ref><sp/>previous,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref><sp/>parentScope,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.TraceStack.Push(this.MakeTraceSite($</highlight><highlight class="stringliteral">&quot;{GetType().Name}<sp/>&apos;{ToString()}&apos;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>SubExpressionImpl(previous,<sp/>parentScope,<sp/>context);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.TraceStack.Pop();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">abstract</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>SubExpressionImpl(<ref refid="interface_element_1_1_a_s_t_1_1_i_value" kindref="compound">IValue</ref><sp/>previous,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref><sp/>scope,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ReSharper<sp/>disable<sp/>once<sp/>UnusedType.Global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_call_expression" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_call_expression" kindref="compound">CallExpression</ref><sp/>:<sp/><ref refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_sub_expression" kindref="compound">SubExpression</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>disable<sp/>169,<sp/>8618</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ReSharper<sp/>disable<sp/>once<sp/>UnusedAutoPropertyAccessor.Local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[field:<sp/>Term]<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_a_s_t_1_1_list_of" kindref="compound">ListOf&lt;Expression&gt;</ref><sp/>Expressions<sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>restore<sp/>169,<sp/>8618</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ToString()<sp/>=&gt;<sp/>Expressions.ToString();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ValidateImpl(<ref refid="class_element_1_1_result_builder" kindref="compound">ResultBuilder</ref><sp/>builder,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>expr<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>Expressions.List)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.Validate(builder,<sp/>context);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>SubExpressionImpl(<ref refid="interface_element_1_1_a_s_t_1_1_i_value" kindref="compound">IValue</ref><sp/>previous,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref><sp/>scope,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expressions.List</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Select(argExpr<sp/>=&gt;<sp/>argExpr.ResolveExpression(scope,<sp/>context))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.BindEnumerable(args<sp/>=&gt;<sp/>previous.Call(args.ToArray(),<sp/>context));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ReSharper<sp/>disable<sp/>once<sp/>UnusedType.Global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_indexing_expression" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_indexing_expression" kindref="compound">IndexingExpression</ref><sp/>:<sp/><ref refid="class_element_1_1_a_s_t_1_1_expression_chain_1_1_sub_expression" kindref="compound">SubExpression</ref></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>disable<sp/>169</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ReSharper<sp/>disable<sp/>once<sp/>UnusedAutoPropertyAccessor.Local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[field:<sp/>Term,<sp/>Prefix(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)]<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref><sp/>{<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">;<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>restore<sp/>169</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ToString()<sp/>=&gt;<sp/>$</highlight><highlight class="stringliteral">&quot;.{Identifier}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ValidateImpl(<ref refid="class_element_1_1_result_builder" kindref="compound">ResultBuilder</ref><sp/>builder,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;<sp/><ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>.Validate(builder,<sp/>Array.Empty&lt;<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>&gt;(),<sp/>Array.Empty&lt;<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>&gt;());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;IValue&gt;</ref><sp/>SubExpressionImpl(<ref refid="interface_element_1_1_a_s_t_1_1_i_value" kindref="compound">IValue</ref><sp/>previous,<sp/><ref refid="interface_element_1_1_a_s_t_1_1_i_scope" kindref="compound">IScope</ref><sp/>_,<sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref><sp/>context)<sp/>=&gt;<sp/>previous.Index(<ref refid="struct_element_1_1_a_s_t_1_1_identifier" kindref="compound">Identifier</ref>,<sp/>context);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/Element.NET/!1-AST/Expressions/ExpressionChain.cs"/>
  </compounddef>
</doxygen>
