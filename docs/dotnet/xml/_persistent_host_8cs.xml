<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_persistent_host_8cs" kind="file" language="C#">
    <compoundname>PersistentHost.cs</compoundname>
    <innerclass refid="class_element_1_1_persistent_host" prot="public">Element::PersistentHost</innerclass>
    <innernamespace refid="namespace_element">Element</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_element" kindref="compound">Element</ref></highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>AST;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="10" refid="class_element_1_1_persistent_host" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_element_1_1_persistent_host" kindref="compound">PersistentHost</ref><sp/>:<sp/><ref refid="interface_element_1_1_i_host" kindref="compound">IHost</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_persistent_host" kindref="compound">PersistentHost</ref><sp/>Create(<ref refid="struct_element_1_1_compiler_options" kindref="compound">CompilerOptions</ref><sp/>options)<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_persistent_host" kindref="compound">PersistentHost</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_source_context" kindref="compound">SourceContext</ref>(options));</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_persistent_host" kindref="compound">PersistentHost</ref>(<ref refid="class_element_1_1_source_context" kindref="compound">SourceContext</ref><sp/>context)<sp/>=&gt;<sp/>_srcContext<sp/>=<sp/>context;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>readonly<sp/><ref refid="class_element_1_1_source_context" kindref="compound">SourceContext</ref><sp/>_srcContext;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result</ref><sp/>Parse(<ref refid="class_element_1_1_compiler_input" kindref="compound">CompilerInput</ref><sp/>input)<sp/>=&gt;<sp/>(<ref refid="struct_element_1_1_result" kindref="compound">Result</ref>)_srcContext.LoadCompilerInput(input);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;float[]&gt;</ref><sp/>Evaluate(<ref refid="class_element_1_1_compiler_input" kindref="compound">CompilerInput</ref><sp/>input,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>expression)<sp/>=&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_srcContext.LoadCompilerInput(input)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Bind(_<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref>(_srcContext).EvaluateExpression(expression))</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Bind(value<sp/>=&gt;<sp/>value.SerializeToFloats(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref>(_srcContext)));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;string&gt;</ref><sp/>Typeof(<ref refid="class_element_1_1_compiler_input" kindref="compound">CompilerInput</ref><sp/>input,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>expression)<sp/>=&gt;<sp/>Stringify(input,<sp/>expression,<sp/>value<sp/>=&gt;<sp/>value.TypeOf);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;string&gt;</ref><sp/>Summary(<ref refid="class_element_1_1_compiler_input" kindref="compound">CompilerInput</ref><sp/>input,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>expression)<sp/>=&gt;<sp/>Stringify(input,<sp/>expression,<sp/>value<sp/>=&gt;<sp/>value.SummaryString);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;string&gt;</ref><sp/>NormalForm(<ref refid="class_element_1_1_compiler_input" kindref="compound">CompilerInput</ref><sp/>input,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>expression)<sp/>=&gt;<sp/>Stringify(input,<sp/>expression,<sp/>value<sp/>=&gt;<sp/>value.NormalizedFormString);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="struct_element_1_1_result" kindref="compound">Result&lt;string&gt;</ref><sp/>Stringify(<ref refid="class_element_1_1_compiler_input" kindref="compound">CompilerInput</ref><sp/>input,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>expression,<sp/>Func&lt;IValue,<sp/>string&gt;<sp/>stringify)<sp/>=&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_srcContext.LoadCompilerInput(input)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Bind(_<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_element_1_1_context" kindref="compound">Context</ref>(_srcContext).EvaluateExpression(expression))</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Map(stringify);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/Element.NET/Host/PersistentHost.cs"/>
  </compounddef>
</doxygen>
