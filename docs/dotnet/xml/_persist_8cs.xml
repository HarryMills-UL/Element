<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_persist_8cs" kind="file" language="C#">
    <compoundname>Persist.cs</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*namespace<sp/>Element</highlight></codeline>
<codeline lineno="2"><highlight class="comment">{</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>System;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>System.Collections.ObjectModel;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>System.Linq;</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>public<sp/>class<sp/>Persist<sp/>:<sp/>InstructionGroup</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public<sp/>override<sp/>int<sp/>Size<sp/>=&gt;<sp/>State.Count;</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public<sp/>ReadOnlyCollection&lt;State&gt;<sp/>State<sp/>{<sp/>get;<sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public<sp/>ReadOnlyCollection&lt;Instruction&gt;<sp/>NewValue<sp/>{<sp/>get;<sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public<sp/>Persist(IEnumerable&lt;Instruction&gt;<sp/>initialValue,<sp/>NewValueFunction<sp/>newValue)</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State<sp/>=<sp/>initialValue.Select((v,<sp/>i)<sp/>=&gt;<sp/>new<sp/>State(i,<sp/>0,<sp/>v)).ToList().AsReadOnly();</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewValue<sp/>=<sp/>new<sp/>ReadOnlyCollection&lt;Instruction&gt;(newValue(State).ToArray());</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(NewValue.Any(e<sp/>=&gt;<sp/>e<sp/>==<sp/>null))</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>ArgumentException(&quot;An<sp/>operand<sp/>was<sp/>null&quot;);</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(State.Count<sp/>!=<sp/>NewValue.Count)</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>ArgumentException(&quot;Collection<sp/>counts<sp/>were<sp/>different&quot;);</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Increment<sp/>the<sp/>scope<sp/>number<sp/>if<sp/>there&apos;s<sp/>nested<sp/>loops</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>scope<sp/>=<sp/>NewValue.SelectMany(n<sp/>=&gt;<sp/>n.AllDependent).OfType&lt;State&gt;().OrderBy(s<sp/>=&gt;<sp/>s.Scope).FirstOrDefault();</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(scope<sp/>!=<sp/>null)</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State<sp/>=<sp/>initialValue.Select((v,<sp/>i)<sp/>=&gt;<sp/>new<sp/>State(i,<sp/>scope.Id<sp/>+<sp/>1,<sp/>v)).ToList().AsReadOnly();</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewValue<sp/>=<sp/>new<sp/>ReadOnlyCollection&lt;Instruction&gt;(newValue(State).ToArray());</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public<sp/>override<sp/>IEnumerable&lt;Instruction&gt;<sp/>Dependent<sp/>=&gt;<sp/>State.Concat(NewValue);</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protected<sp/>override<sp/>string<sp/>ToStringInternal()<sp/>=&gt;<sp/>$&quot;Persist({StateListJoin(State)};<sp/>{ListJoinToString(NewValue)})&quot;;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>public<sp/>override<sp/>bool<sp/>Equals(Instruction<sp/>other)<sp/>=&gt;<sp/>this<sp/>==<sp/>other<sp/>||<sp/>other<sp/>is<sp/>Persist<sp/>&amp;&amp;<sp/>other.ToString()<sp/>==<sp/>ToString();</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="comment">}*/</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/Element.NET/!3-Instructions/ExpressionGroup/Persist.cs"/>
  </compounddef>
</doxygen>
