<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="intrinsic__for_8cpp" kind="file" language="C++">
    <compoundname>intrinsic_for.cpp</compoundname>
    <includes refid="intrinsic_8hpp" local="yes">intrinsic.hpp</includes>
    <includes refid="intrinsic__for_8hpp" local="yes">intrinsic_for.hpp</includes>
    <includes refid="error_8hpp" local="yes">object_model/error.hpp</includes>
    <includes refid="function__instance_8hpp" local="yes">object_model/intermediaries/function_instance.hpp</includes>
    <includes refid="struct__instance_8hpp" local="yes">object_model/intermediaries/struct_instance.hpp</includes>
    <includes refid="function__declaration_8hpp" local="yes">object_model/declarations/function_declaration.hpp</includes>
    <includes refid="struct__declaration_8hpp" local="yes">object_model/declarations/struct_declaration.hpp</includes>
    <includes refid="intrinsic__function_8hpp" local="yes">object_model/intrinsics/intrinsic_function.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="9">
        <label>fmt/format.h</label>
      </node>
      <node id="20">
        <label>element/ast.h</label>
      </node>
      <node id="50">
        <label>object_model/error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>declarations/declaration.hpp</label>
        <link refid="declaration_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>variant</label>
      </node>
      <node id="16">
        <label>instruction_tree/fwd.hpp</label>
        <link refid="instruction__tree_2fwd_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>common_internal.hpp</label>
        <link refid="common__internal_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="48">
        <label>numeric</label>
      </node>
      <node id="40">
        <label>object_model/compilation_context.hpp</label>
        <link refid="compilation__context_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>source_information.hpp</label>
        <link refid="source__information_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="19">
        <label>ast_indexes.hpp</label>
        <link refid="ast__indexes_8hpp_source"/>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="22">
        <label>interpreter_internal.hpp</label>
        <link refid="interpreter__internal_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>instruction_tree/instructions.hpp</label>
        <link refid="instructions_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>object_model/intermediaries/struct_instance.hpp</label>
        <link refid="struct__instance_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>intrinsic_for.hpp</label>
        <link refid="intrinsic__for_8hpp_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>object_model/intermediaries/declaration_wrapper.hpp</label>
        <link refid="declaration__wrapper_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>element/common.h</label>
      </node>
      <node id="23">
        <label>element/interpreter.h</label>
      </node>
      <node id="14">
        <label>element/token.h</label>
      </node>
      <node id="26">
        <label>optional</label>
      </node>
      <node id="51">
        <label>object_model/intermediaries/function_instance.hpp</label>
        <link refid="function__instance_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="43">
        <label>declarations/function_declaration.hpp</label>
        <link refid="function__declaration_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>object_model/call_stack.hpp</label>
        <link refid="call__stack_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>fwd.hpp</label>
        <link refid="object__model_2fwd_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_for.cpp</label>
        <link refid="intrinsic__for_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>identifier.hpp</label>
        <link refid="identifier_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>utility</label>
      </node>
      <node id="18">
        <label>sstream</label>
      </node>
      <node id="29">
        <label>port.hpp</label>
        <link refid="port_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>capture_stack.hpp</label>
        <link refid="capture__stack_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>configuration.hpp</label>
      </node>
      <node id="27">
        <label>ast/fwd.hpp</label>
        <link refid="ast_2fwd_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>cstdlib</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="35">
        <label>typeutil.hpp</label>
        <link refid="typeutil_8hpp_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>intrinsic_function.hpp</label>
        <link refid="intrinsic__function_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>unordered_map</label>
      </node>
      <node id="17">
        <label>ast/ast_internal.hpp</label>
        <link refid="ast__internal_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>log_errors.hpp</label>
        <link refid="log__errors_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>object_model/declarations/struct_declaration.hpp</label>
        <link refid="struct__declaration_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>object_model/constraints/user_type.hpp</label>
        <link refid="user__type_8hpp_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>type_traits</label>
      </node>
      <node id="25">
        <label>object.hpp</label>
        <link refid="object_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>object_model/constraints/type.hpp</label>
        <link refid="type_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>object_model/scope.hpp</label>
        <link refid="scope_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>instruction_tree/evaluator.hpp</label>
        <link refid="evaluator_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>intrinsic.hpp</label>
        <link refid="intrinsic_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>type_annotation.hpp</label>
        <link refid="type__annotation_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="45">
        <label>object_model/constraints/constraint.hpp</label>
        <link refid="constraint_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="intrinsic__for_8cpp_1ad5f7400460ba3ef5c261403e1ffa5c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object_const_shared_ptr</type>
        <definition>object_const_shared_ptr compile_time_for</definition>
        <argsstring>(const object_const_shared_ptr &amp;initial_object, const std::shared_ptr&lt; const function_instance &gt; &amp;predicate_function, const std::shared_ptr&lt; const function_instance &gt; &amp;body_function, const source_information &amp;source_info, const compilation_context &amp;context)</argsstring>
        <name>compile_time_for</name>
        <param>
          <type>const object_const_shared_ptr &amp;</type>
          <declname>initial_object</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classelement_1_1function__instance" kindref="compound">function_instance</ref> &gt; &amp;</type>
          <declname>predicate_function</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classelement_1_1function__instance" kindref="compound">function_instance</ref> &gt; &amp;</type>
          <declname>body_function</declname>
        </param>
        <param>
          <type>const <ref refid="classelement_1_1source__information" kindref="compound">source_information</ref> &amp;</type>
          <declname>source_info</declname>
        </param>
        <param>
          <type>const <ref refid="classelement_1_1compilation__context" kindref="compound">compilation_context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_for.cpp" line="14" column="25" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_for.cpp" bodystart="14" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="intrinsic__for_8cpp_1ae113a816150e42b52ee41ce5e9416932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object_const_shared_ptr</type>
        <definition>object_const_shared_ptr runtime_for</definition>
        <argsstring>(const object_const_shared_ptr &amp;initial_object, const std::shared_ptr&lt; const function_instance &gt; &amp;predicate_function, const std::shared_ptr&lt; const function_instance &gt; &amp;body_function, const source_information &amp;source_info, const compilation_context &amp;context)</argsstring>
        <name>runtime_for</name>
        <param>
          <type>const object_const_shared_ptr &amp;</type>
          <declname>initial_object</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classelement_1_1function__instance" kindref="compound">function_instance</ref> &gt; &amp;</type>
          <declname>predicate_function</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classelement_1_1function__instance" kindref="compound">function_instance</ref> &gt; &amp;</type>
          <declname>body_function</declname>
        </param>
        <param>
          <type>const <ref refid="classelement_1_1source__information" kindref="compound">source_information</ref> &amp;</type>
          <declname>source_info</declname>
        </param>
        <param>
          <type>const <ref refid="classelement_1_1compilation__context" kindref="compound">compilation_context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_for.cpp" line="101" column="25" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_for.cpp" bodystart="101" bodyend="158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;intrinsic.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;intrinsic_for.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//SELF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/error.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/intermediaries/function_instance.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/intermediaries/struct_instance.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/declarations/function_declaration.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/declarations/struct_declaration.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/intrinsics/intrinsic_function.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">element;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">object_const_shared_ptr<sp/>compile_time_for(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>object_const_shared_ptr&amp;<sp/>initial_object,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>function_instance&gt;&amp;<sp/>predicate_function,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>function_instance&gt;&amp;<sp/>body_function,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classelement_1_1source__information" kindref="compound">source_information</ref>&amp;<sp/>source_info,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classelement_1_1compilation__context" kindref="compound">compilation_context</ref>&amp;<sp/>context)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_constant<sp/>=<sp/>initial_object-&gt;is_constant();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_constant)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//note:<sp/>the<sp/>predicate<sp/>and<sp/>the<sp/>body<sp/>could<sp/>still<sp/>return<sp/>something<sp/>which<sp/>is<sp/>not<sp/>constant,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>check<sp/>constantly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>predicate_evaluated_to_constant<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>continue_loop<sp/>=<sp/>[&amp;predicate_evaluated_to_constant,<sp/>&amp;predicate_function,<sp/>&amp;context,<sp/>&amp;source_info](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;object_const_shared_ptr&gt;&amp;<sp/>input)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>predicate_function-&gt;call(context,<sp/>input,<sp/>source_info);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>err<sp/>=<sp/>dynamic_cast&lt;const<sp/>error*&gt;(ret.get()))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err-&gt;log_once(context.interpreter-&gt;logger.get());</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo:<sp/>one<sp/>day<sp/>we&apos;ll<sp/>use<sp/>the<sp/>fast<sp/>RTTI<sp/>instead<sp/>of<sp/>the<sp/>language<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>return<sp/>value<sp/>is<sp/>going<sp/>to<sp/>be<sp/>a<sp/>bool<sp/>(of<sp/>some<sp/>kind),<sp/>and<sp/>bools<sp/>are<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret_as_expression<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>element_instruction&gt;(ret);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret_as_expression<sp/>||<sp/>!ret_as_expression-&gt;is_constant())</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicate_evaluated_to_constant<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret_evaluated<sp/>=<sp/>evaluate(context,<sp/>ret_as_expression);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ret_evaluated);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret_as_constant<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>element_instruction_constant&gt;(ret_evaluated);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret_as_constant)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predicate_evaluated_to_constant<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_as_constant-&gt;value()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next_successor<sp/>=<sp/>[&amp;initial_object,<sp/>&amp;body_function,<sp/>&amp;context,<sp/>&amp;source_info](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;object_const_shared_ptr&gt;&amp;<sp/>input)<sp/>-&gt;<sp/>object_const_shared_ptr<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>body_function-&gt;call(context,<sp/>input,<sp/>source_info);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret-&gt;is_constant())</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>error&gt;(ret))</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err-&gt;log_once(context.interpreter-&gt;logger.get());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo:<sp/>we<sp/>could<sp/>allow<sp/>for<sp/>a<sp/>compile-time<sp/>for<sp/>loop<sp/>to<sp/>return<sp/>a<sp/>different<sp/>type<sp/>than<sp/>it<sp/>started<sp/>with,<sp/>but<sp/>for<sp/>now<sp/>let&apos;s<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret-&gt;matches_constraint(context,<sp/>initial_object-&gt;get_constraint()))</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;object_const_shared_ptr&gt;<sp/>arguments{<sp/>initial_object<sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>current_object<sp/>=<sp/>arguments[0];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo:<sp/>in<sp/>order<sp/>to<sp/>detect<sp/>an<sp/>infinite<sp/>loop<sp/>we<sp/>need<sp/>to<sp/>know<sp/>if<sp/>the<sp/>predicates<sp/>result<sp/>is<sp/>dependent<sp/>on<sp/>its<sp/>input,<sp/>i.e.<sp/>it<sp/>is<sp/>actually<sp/>using<sp/>it<sp/>to<sp/>alter<sp/>the<sp/>calculation<sp/>in<sp/>a<sp/>meaningful<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>not<sp/>sure<sp/>how<sp/>to<sp/>do<sp/>it,<sp/>but<sp/>the<sp/>loop<sp/>iteration<sp/>limit<sp/>will<sp/>catch<sp/>the<sp/>infinite<sp/>loop<sp/>situation<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo:<sp/>make<sp/>this<sp/>user<sp/>configurable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_loop_iterations<sp/>=<sp/>10</highlight><highlight class="stringliteral">&apos;000;</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>current_loop_iteration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>while<sp/>(continue_loop(arguments))</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(current_loop_iteration<sp/>&gt;<sp/>max_loop_iterations)</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;const<sp/>error&gt;(fmt::format(&quot;Compile<sp/>time<sp/>loop<sp/>didn&apos;</highlight><highlight class="normal">t<sp/>finish<sp/>after<sp/>max<sp/>iteration<sp/>count<sp/>of<sp/>{}</highlight><highlight class="stringliteral">&quot;,<sp/>max_loop_iterations),<sp/>ELEMENT_ERROR_COMPILETIME_LOOP_TOO_MANY_ITERATIONS,<sp/>source_info);</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_object<sp/>=<sp/>next_successor(arguments);</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!current_object)</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>current_object;</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++current_loop_iteration;</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!predicate_evaluated_to_constant)</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>nullptr;</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>current_object;</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral">object_const_shared_ptr<sp/>runtime_for(const<sp/>object_const_shared_ptr&amp;<sp/>initial_object,</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;const<sp/>function_instance&gt;&amp;<sp/>predicate_function,</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;const<sp/>function_instance&gt;&amp;<sp/>body_function,</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>source_information&amp;<sp/>source_info,</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>compilation_context&amp;<sp/>context)</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>element_result<sp/>result<sp/>=<sp/>ELEMENT_OK;</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//ensure<sp/>that<sp/>these<sp/>are<sp/>boundary<sp/>functions<sp/>as<sp/>we&apos;ll<sp/>need<sp/>to<sp/>compile<sp/>them<sp/>like<sp/>any<sp/>other<sp/>boundary<sp/>function</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>predicate_is_boundary<sp/>=<sp/>predicate_function-&gt;valid_at_boundary(context);</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!predicate_is_boundary)</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;const<sp/>error&gt;(&quot;</highlight><highlight class="normal">predicate<sp/>is<sp/>not<sp/>a<sp/>boundary<sp/></highlight><highlight class="keyword">function</highlight><highlight class="stringliteral">&quot;,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>predicate_function-&gt;source_info);</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>body_is_boundary<sp/>=<sp/>body_function-&gt;valid_at_boundary(context);</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!body_is_boundary)</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;const<sp/>error&gt;(&quot;</highlight><highlight class="normal">body<sp/>is<sp/>not<sp/>a<sp/>boundary<sp/></highlight><highlight class="keyword">function</highlight><highlight class="stringliteral">&quot;,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>body_function-&gt;source_info);</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//compile<sp/>our<sp/>functions<sp/>to<sp/>instruction<sp/>trees,<sp/>with<sp/>their<sp/>own<sp/>placeholder<sp/>input<sp/>instructions</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>placeholder_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>predicate_compiled<sp/>=<sp/>compile_placeholder_expression(context,<sp/>*predicate_function,<sp/>predicate_function-&gt;declarer-&gt;get_inputs(),<sp/>result,<sp/>source_info,<sp/>placeholder_offset);</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!predicate_compiled)</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;const<sp/>error&gt;(&quot;</highlight><highlight class="normal">predicate<sp/>failed<sp/>to<sp/>compile</highlight><highlight class="stringliteral">&quot;,<sp/>result,<sp/>source_info);</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>body_compiled<sp/>=<sp/>compile_placeholder_expression(context,<sp/>*body_function,<sp/>body_function-&gt;declarer-&gt;get_inputs(),<sp/>result,<sp/>source_info,<sp/>placeholder_offset);</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!body_compiled)</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;const<sp/>error&gt;(&quot;</highlight><highlight class="normal">body<sp/>failed<sp/>to<sp/>compile</highlight><highlight class="stringliteral">&quot;,<sp/>result,<sp/>source_info);</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>predicate_expression<sp/>=<sp/>predicate_compiled-&gt;to_instruction();</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!predicate_expression)</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;const<sp/>error&gt;(&quot;</highlight><highlight class="normal">predicate<sp/>failed<sp/>to<sp/>compile<sp/>to<sp/>an<sp/>instruction<sp/>tree</highlight><highlight class="stringliteral">&quot;,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>predicate_function-&gt;source_info);</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>body_expression<sp/>=<sp/>body_compiled-&gt;to_instruction();</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!body_expression)</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;const<sp/>error&gt;(&quot;</highlight><highlight class="normal">body<sp/>failed<sp/>to<sp/>compile<sp/>to<sp/>an<sp/>instruction<sp/>tree</highlight><highlight class="stringliteral">&quot;,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>body_function-&gt;source_info);</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//everything<sp/>is<sp/>an<sp/>instruction,<sp/>so<sp/>make<sp/>a<sp/>for<sp/>instruction.<sp/>note:<sp/>initial_object<sp/>is<sp/>either<sp/>Num<sp/>or<sp/>Bool.</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>initial_expression<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>element_instruction&gt;(initial_object);</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(initial_expression)</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;element_instruction_for&gt;(std::move(initial_expression),<sp/>std::move(predicate_expression),<sp/>std::move(body_expression));</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//if<sp/>it<sp/>wasn&apos;t<sp/>an<sp/>instruction,<sp/>let&apos;s<sp/>convert<sp/>it<sp/>in<sp/>to<sp/>one.</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//if<sp/>we<sp/>can&apos;t<sp/>then<sp/>this<sp/>for-loop<sp/>can&apos;t<sp/>be<sp/>done<sp/>at<sp/>runtime,<sp/>since<sp/>it<sp/>can&apos;t<sp/>be<sp/>represented<sp/>in<sp/>the<sp/>instruction<sp/>tree</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initial_expression<sp/>=<sp/>initial_object-&gt;to_instruction();</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(!initial_expression)</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;const<sp/>error&gt;(&quot;</highlight><highlight class="normal">tried<sp/>to<sp/>create<sp/>a<sp/>runtime<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>but<sp/>a<sp/>non-serializable<sp/>initial<sp/>value<sp/>was<sp/>given</highlight><highlight class="stringliteral">&quot;,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>source_info);</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//initial_object<sp/>should<sp/>be<sp/>a<sp/>struct,<sp/>so<sp/>the<sp/>output<sp/>of<sp/>the<sp/>for<sp/>loop<sp/>is<sp/>going<sp/>to<sp/>be<sp/>the<sp/>same<sp/>type<sp/>of<sp/>struct,<sp/>except<sp/>all<sp/>the<sp/>fields<sp/>(flattened<sp/>struct)<sp/>are<sp/>instructions<sp/>referring<sp/>to<sp/>the<sp/>for<sp/>loop</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>for_expression<sp/>=<sp/>std::make_shared&lt;element_instruction_for&gt;(std::move(initial_expression),<sp/>std::move(predicate_expression),<sp/>std::move(body_expression));</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>initial_struct<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>struct_instance&gt;(initial_object);</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>indexing_expression_filler<sp/>=<sp/>[&amp;for_expression](const<sp/>std::string&amp;,</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;const<sp/>element_instruction&gt;&amp;<sp/>field,</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index)<sp/>-&gt;<sp/>std::shared_ptr&lt;const<sp/>element_instruction&gt;<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;element_instruction_indexer&gt;(for_expression,<sp/>index,<sp/>field-&gt;actual_type);</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>initial_struct-&gt;clone_and_fill_with_expressions(context,<sp/>std::move(indexing_expression_filler));</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral">intrinsic_for::intrinsic_for()</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:<sp/>intrinsic_function(type_id,<sp/>nullptr)</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral">object_const_shared_ptr<sp/>intrinsic_for::compile(const<sp/>compilation_context&amp;<sp/>context,</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>source_information&amp;<sp/>source_info)<sp/>const</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto&amp;<sp/>frame<sp/>=<sp/>context.calls.frames.back();</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto&amp;<sp/>declarer<sp/>=<sp/>*frame.function;</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>assert(declarer.inputs.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>assert(frame.compiled_arguments.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>initial<sp/>=<sp/>frame.compiled_arguments[0];</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>predicate<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>function_instance&gt;(frame.compiled_arguments[1]);</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>body<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>function_instance&gt;(frame.compiled_arguments[2]);</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>assert(initial);</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>assert(predicate);</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>assert(body);</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>initial_error<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>error&gt;(initial);</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(initial_error)</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>initial_error;</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>auto<sp/>compile_time_result<sp/>=<sp/>compile_time_for(initial,<sp/>predicate,<sp/>body,<sp/>source_info,<sp/>context);</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(compile_time_result)</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>compile_time_result;</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>runtime_for(initial,<sp/>predicate,<sp/>body,<sp/>source_info,<sp/>context);</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral">}</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_for.cpp"/>
  </compounddef>
</doxygen>
