<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="object__model__builder_8hpp" kind="file" language="C++">
    <compoundname>object_model_builder.hpp</compoundname>
    <includes local="no">memory</includes>
    <includes refid="ast_2fwd_8hpp" local="yes">ast/fwd.hpp</includes>
    <includes refid="object__model_2fwd_8hpp" local="yes">fwd.hpp</includes>
    <includes refid="source__information_8hpp" local="yes">source_information.hpp</includes>
    <includedby refid="interpreter_8cpp" local="yes">/Users/harry.mills/Documents/Repos/Element/libelement/src/interpreter.cpp</includedby>
    <includedby refid="object__model__builder_8cpp" local="yes">/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/object_model_builder.cpp</includedby>
    <incdepgraph>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="11">
        <label>fmt/format.h</label>
      </node>
      <node id="1">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/object_model_builder.hpp</label>
        <link refid="object__model__builder_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>instruction_tree/fwd.hpp</label>
        <link refid="instruction__tree_2fwd_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>common_internal.hpp</label>
        <link refid="common__internal_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="16">
        <label>source_information.hpp</label>
        <link refid="source__information_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="13">
        <label>element/common.h</label>
      </node>
      <node id="12">
        <label>element/token.h</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="15">
        <label>fwd.hpp</label>
        <link refid="object__model_2fwd_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ast/fwd.hpp</label>
        <link refid="ast_2fwd_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceelement">element</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//STD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//SELF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ast/fwd.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fwd.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;source_information.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">element</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo:<sp/>all<sp/>of<sp/>this<sp/>is<sp/>templated<sp/>due<sp/>to<sp/>GCC<sp/>having<sp/>issues<sp/>with<sp/>it,<sp/>move<sp/>somewhere<sp/>else<sp/>where<sp/>we<sp/>can<sp/>have<sp/>complete<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//I<sp/>imagine<sp/>MSVC<sp/>does<sp/>its<sp/>checks<sp/>when<sp/>the<sp/>template<sp/>is<sp/>instantiated,<sp/>where<sp/>as<sp/>GCC<sp/>does<sp/>it<sp/>when<sp/>it&apos;s<sp/>parsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Obj,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AST&gt;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_source_information(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Context*<sp/>context,<sp/>Obj&amp;<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AST*<sp/>ast)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>file_info<sp/>=<sp/>context-&gt;src_context-&gt;file_info.at(ast-&gt;nearest_token-&gt;file_name);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string*<sp/>filename<sp/>=<sp/>file_info.file_name.get();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string*<sp/>line_in_source<sp/>=<sp/>file_info.source_lines[static_cast&lt;std::size_t&gt;(ast-&gt;nearest_token-&gt;line)<sp/>-<sp/>1].get();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;source_info<sp/>=<sp/>source_information(</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ast-&gt;nearest_token-&gt;line,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ast-&gt;nearest_token-&gt;character,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ast-&gt;nearest_token-&gt;character<sp/>+<sp/>ast-&gt;nearest_token-&gt;tok_len,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_in_source,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename-&gt;data());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;identifier,<sp/>const<sp/>element_ast*&gt;&gt;<sp/>deferred_expressions;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;declaration&gt;<sp/>build_lambda_declaration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__interpreter__ctx" kindref="compound">element_interpreter_ctx</ref>*<sp/>context,<sp/>identifier&amp;<sp/>identifier,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>expression,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scope*<sp/>parent_scope,<sp/>element_result&amp;<sp/>output_result);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;expression&gt;<sp/>build_expression(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__interpreter__ctx" kindref="compound">element_interpreter_ctx</ref>*<sp/>context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast,<sp/>expression_chain*<sp/>chain,<sp/>deferred_expressions&amp;<sp/>deferred_expressions,<sp/>element_result&amp;<sp/>output_result);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;expression_chain&gt;<sp/>build_expression_chain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__interpreter__ctx" kindref="compound">element_interpreter_ctx</ref>*<sp/>context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ast,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>declaration*<sp/>declarer,<sp/>deferred_expressions&amp;<sp/>deferred_expressions,<sp/>element_result&amp;<sp/>output_result);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;scope&gt;<sp/>build_root_scope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__interpreter__ctx" kindref="compound">element_interpreter_ctx</ref>*<sp/>context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast,<sp/>element_result&amp;<sp/>output_result);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>element</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/object_model_builder.hpp"/>
  </compounddef>
</doxygen>
