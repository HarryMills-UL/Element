<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="intrinsic__list__fold_8cpp" kind="file" language="C++">
    <compoundname>intrinsic_list_fold.cpp</compoundname>
    <includes refid="intrinsic_8hpp" local="yes">intrinsic.hpp</includes>
    <includes refid="intrinsic__list__fold_8hpp" local="yes">intrinsic_list_fold.hpp</includes>
    <includes refid="error_8hpp" local="yes">object_model/error.hpp</includes>
    <includes refid="function__instance_8hpp" local="yes">object_model/intermediaries/function_instance.hpp</includes>
    <includes refid="struct__instance_8hpp" local="yes">object_model/intermediaries/struct_instance.hpp</includes>
    <includes refid="function__declaration_8hpp" local="yes">object_model/declarations/function_declaration.hpp</includes>
    <includes refid="struct__declaration_8hpp" local="yes">object_model/declarations/struct_declaration.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="9">
        <label>fmt/format.h</label>
      </node>
      <node id="20">
        <label>element/ast.h</label>
      </node>
      <node id="50">
        <label>object_model/error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>declarations/declaration.hpp</label>
        <link refid="declaration_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>variant</label>
      </node>
      <node id="16">
        <label>instruction_tree/fwd.hpp</label>
        <link refid="instruction__tree_2fwd_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>common_internal.hpp</label>
        <link refid="common__internal_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="48">
        <label>numeric</label>
      </node>
      <node id="40">
        <label>object_model/compilation_context.hpp</label>
        <link refid="compilation__context_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>source_information.hpp</label>
        <link refid="source__information_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="19">
        <label>ast_indexes.hpp</label>
        <link refid="ast__indexes_8hpp_source"/>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="22">
        <label>interpreter_internal.hpp</label>
        <link refid="interpreter__internal_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>instruction_tree/instructions.hpp</label>
        <link refid="instructions_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>object_model/intermediaries/struct_instance.hpp</label>
        <link refid="struct__instance_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>object_model/intermediaries/declaration_wrapper.hpp</label>
        <link refid="declaration__wrapper_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>element/common.h</label>
      </node>
      <node id="23">
        <label>element/interpreter.h</label>
      </node>
      <node id="14">
        <label>element/token.h</label>
      </node>
      <node id="1">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_list_fold.cpp</label>
        <link refid="intrinsic__list__fold_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>optional</label>
      </node>
      <node id="51">
        <label>object_model/intermediaries/function_instance.hpp</label>
        <link refid="function__instance_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="43">
        <label>declarations/function_declaration.hpp</label>
        <link refid="function__declaration_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>object_model/call_stack.hpp</label>
        <link refid="call__stack_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>fwd.hpp</label>
        <link refid="object__model_2fwd_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>identifier.hpp</label>
        <link refid="identifier_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>utility</label>
      </node>
      <node id="18">
        <label>sstream</label>
      </node>
      <node id="29">
        <label>port.hpp</label>
        <link refid="port_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>capture_stack.hpp</label>
        <link refid="capture__stack_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>configuration.hpp</label>
      </node>
      <node id="27">
        <label>ast/fwd.hpp</label>
        <link refid="ast_2fwd_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>cstdlib</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="35">
        <label>typeutil.hpp</label>
        <link refid="typeutil_8hpp_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>intrinsic_function.hpp</label>
        <link refid="intrinsic__function_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>unordered_map</label>
      </node>
      <node id="17">
        <label>ast/ast_internal.hpp</label>
        <link refid="ast__internal_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>log_errors.hpp</label>
        <link refid="log__errors_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>object_model/declarations/struct_declaration.hpp</label>
        <link refid="struct__declaration_8hpp_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>intrinsic_list_fold.hpp</label>
        <link refid="intrinsic__list__fold_8hpp_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>object_model/constraints/user_type.hpp</label>
        <link refid="user__type_8hpp_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>type_traits</label>
      </node>
      <node id="25">
        <label>object.hpp</label>
        <link refid="object_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>object_model/constraints/type.hpp</label>
        <link refid="type_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>object_model/scope.hpp</label>
        <link refid="scope_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>instruction_tree/evaluator.hpp</label>
        <link refid="evaluator_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>intrinsic.hpp</label>
        <link refid="intrinsic_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>type_annotation.hpp</label>
        <link refid="type__annotation_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="45">
        <label>object_model/constraints/constraint.hpp</label>
        <link refid="constraint_8hpp_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="intrinsic__list__fold_8cpp_1a77f2bf50fedf6c994778a9d45429e6ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object_const_shared_ptr</type>
        <definition>object_const_shared_ptr compile_time_fold</definition>
        <argsstring>(const compilation_context &amp;context, const std::shared_ptr&lt; const struct_instance &gt; &amp;list, const object_const_shared_ptr &amp;initial, const std::shared_ptr&lt; const function_instance &gt; &amp;accumulator_function, const source_information &amp;source_info)</argsstring>
        <name>compile_time_fold</name>
        <param>
          <type>const <ref refid="classelement_1_1compilation__context" kindref="compound">compilation_context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classelement_1_1struct__instance" kindref="compound">struct_instance</ref> &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const object_const_shared_ptr &amp;</type>
          <declname>initial</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classelement_1_1function__instance" kindref="compound">function_instance</ref> &gt; &amp;</type>
          <declname>accumulator_function</declname>
        </param>
        <param>
          <type>const <ref refid="classelement_1_1source__information" kindref="compound">source_information</ref> &amp;</type>
          <declname>source_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_list_fold.cpp" line="18" column="25" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_list_fold.cpp" bodystart="18" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="intrinsic__list__fold_8cpp_1ad016cab1a0f5e9ba0c68608508a3e02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>object_const_shared_ptr</type>
        <definition>object_const_shared_ptr runtime_fold</definition>
        <argsstring>(const compilation_context &amp;context, const std::shared_ptr&lt; const struct_instance &gt; &amp;list, const object_const_shared_ptr &amp;initial, const std::shared_ptr&lt; const function_instance &gt; &amp;accumulator_function, const source_information &amp;source_info)</argsstring>
        <name>runtime_fold</name>
        <param>
          <type>const <ref refid="classelement_1_1compilation__context" kindref="compound">compilation_context</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classelement_1_1struct__instance" kindref="compound">struct_instance</ref> &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const object_const_shared_ptr &amp;</type>
          <declname>initial</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classelement_1_1function__instance" kindref="compound">function_instance</ref> &gt; &amp;</type>
          <declname>accumulator_function</declname>
        </param>
        <param>
          <type>const <ref refid="classelement_1_1source__information" kindref="compound">source_information</ref> &amp;</type>
          <declname>source_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_list_fold.cpp" line="53" column="25" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_list_fold.cpp" bodystart="53" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;intrinsic.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;intrinsic_list_fold.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//SELF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/error.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/intermediaries/function_instance.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/intermediaries/struct_instance.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/declarations/function_declaration.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;object_model/declarations/struct_declaration.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">element;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">intrinsic_list_fold::intrinsic_list_fold()</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classelement_1_1intrinsic__function" kindref="compound">intrinsic_function</ref>(type_id,<sp/>nullptr)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">object_const_shared_ptr<sp/>compile_time_fold(</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classelement_1_1compilation__context" kindref="compound">compilation_context</ref>&amp;<sp/>context,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>struct_instance&gt;&amp;<sp/>list,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>object_const_shared_ptr&amp;<sp/>initial,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>function_instance&gt;&amp;<sp/>accumulator_function,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classelement_1_1source__information" kindref="compound">source_information</ref>&amp;<sp/>source_info)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_constant<sp/>=<sp/>list-&gt;is_constant();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_constant)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_count<sp/>=<sp/>list-&gt;index(context,<sp/>identifier::list_count_identifier,<sp/>source_info)-&gt;compile(context,<sp/>source_info);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list_count-&gt;is_constant())</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_count_constant<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>element_instruction_constant&gt;(list_count);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;object_const_shared_ptr&gt;<sp/>indexer_arguments;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>indexer_arguments.resize(1);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>aggregate<sp/>=<sp/>initial;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>list_count_constant-&gt;value();<sp/>++i)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexer_arguments[0]<sp/>=<sp/>std::make_shared&lt;const<sp/>element_instruction_constant&gt;(static_cast&lt;element_value&gt;(i));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>at_index<sp/>=<sp/>list-&gt;index(context,<sp/>identifier::list_at_identifier,<sp/>source_info)-&gt;call(context,<sp/>indexer_arguments,<sp/>source_info);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!at_index-&gt;is_constant())</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//note:<sp/>the<sp/>order<sp/>must<sp/>be<sp/>maintained<sp/>across<sp/>compilers<sp/>to<sp/>ensure<sp/>the<sp/>same<sp/>results<sp/>for<sp/>non-commutative<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aggregate<sp/>=<sp/>accumulator_function-&gt;call(context,<sp/>{<sp/>std::move(aggregate),<sp/>std::move(at_index)<sp/>},<sp/>source_info);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aggregate;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">object_const_shared_ptr<sp/>runtime_fold(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classelement_1_1compilation__context" kindref="compound">compilation_context</ref>&amp;<sp/>context,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>struct_instance&gt;&amp;<sp/>list,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>object_const_shared_ptr&amp;<sp/>initial,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>function_instance&gt;&amp;<sp/>accumulator_function,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classelement_1_1source__information" kindref="compound">source_information</ref>&amp;<sp/>source_info)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accumulator_is_boundary<sp/>=<sp/>accumulator_function-&gt;valid_at_boundary(context);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accumulator_is_boundary)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;const<sp/>error&gt;(</highlight><highlight class="stringliteral">&quot;accumulator<sp/>is<sp/>not<sp/>a<sp/>boundary<sp/>function&quot;</highlight><highlight class="normal">,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>accumulator_function-&gt;source_info);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>result<sp/>=<sp/>ELEMENT_OK;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>placeholder_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accumulator_compiled<sp/>=<sp/>compile_placeholder_expression(context,<sp/>*accumulator_function,<sp/>accumulator_function-&gt;declarer-&gt;get_inputs(),<sp/>result,<sp/>source_info,<sp/>placeholder_offset);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accumulator_compiled)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;const<sp/>error&gt;(</highlight><highlight class="stringliteral">&quot;accumulator<sp/>failed<sp/>to<sp/>compile&quot;</highlight><highlight class="normal">,<sp/>result,<sp/>source_info);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accumulator_expression<sp/>=<sp/>accumulator_compiled-&gt;to_instruction();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accumulator_expression)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;const<sp/>error&gt;(</highlight><highlight class="stringliteral">&quot;accumulator<sp/>failed<sp/>to<sp/>compile<sp/>to<sp/>an<sp/>instruction<sp/>tree&quot;</highlight><highlight class="normal">,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>accumulator_function-&gt;source_info);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>listfold<sp/>=<sp/>context.get_compiler_scope()-&gt;find(<ref refid="classelement_1_1identifier" kindref="compound">identifier</ref>{<sp/></highlight><highlight class="stringliteral">&quot;@list_fold&quot;</highlight><highlight class="normal"><sp/>},<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!listfold)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;const<sp/>error&gt;(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>find<sp/>@list_fold&quot;</highlight><highlight class="normal">,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>source_info);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;object_const_shared_ptr&gt;<sp/>list_fold_args{<sp/>list,<sp/>initial,<sp/>accumulator_function<sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>listfold-&gt;call(context,<sp/>std::move(list_fold_args),<sp/>source_info);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">object_const_shared_ptr<sp/>intrinsic_list_fold::compile(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classelement_1_1compilation__context" kindref="compound">compilation_context</ref>&amp;<sp/>context,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classelement_1_1source__information" kindref="compound">source_information</ref>&amp;<sp/>source_info)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="85"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>frame<sp/>=<sp/>context.calls.frames.back();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>declarer<sp/>=<sp/>*frame.function;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(declarer.inputs.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(frame.compiled_arguments.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>list<sp/>=<sp/>frame.compiled_arguments[0];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>initial<sp/>=<sp/>frame.compiled_arguments[1];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>accumulator<sp/>=<sp/>frame.compiled_arguments[2];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>list_struct<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>struct_instance&gt;(list);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list_struct)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;const<sp/>error&gt;(</highlight><highlight class="stringliteral">&quot;first<sp/>argument<sp/>must<sp/>be<sp/>a<sp/>list<sp/>struct<sp/>instance&quot;</highlight><highlight class="normal">,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>source_info);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accumulator_instance<sp/>=<sp/>std::dynamic_pointer_cast&lt;const<sp/>function_instance&gt;(accumulator);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!accumulator_instance)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;const<sp/>error&gt;(</highlight><highlight class="stringliteral">&quot;first<sp/>argument<sp/>must<sp/>be<sp/>a<sp/>binary<sp/>function<sp/>instance&quot;</highlight><highlight class="normal">,<sp/>ELEMENT_ERROR_UNKNOWN,<sp/>source_info);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compile_time_result<sp/>=<sp/>compile_time_fold(context,<sp/>list_struct,<sp/>initial,<sp/>accumulator_instance,<sp/>source_info);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compile_time_result)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compile_time_result;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>runtime_fold(context,<sp/>list_struct,<sp/>initial,<sp/>accumulator_instance,<sp/>source_info);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_list_fold.cpp"/>
  </compounddef>
</doxygen>
