<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="ast__internal_8hpp" kind="file" language="C++">
    <compoundname>ast_internal.hpp</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">memory</includes>
    <includes local="no">functional</includes>
    <includes local="no">sstream</includes>
    <includes refid="ast__indexes_8hpp" local="yes">ast_indexes.hpp</includes>
    <includes refid="common__internal_8hpp" local="yes">../common_internal.hpp</includes>
    <includes local="yes">element/ast.h</includes>
    <includes local="yes">element/token.h</includes>
    <includes local="no">cassert</includes>
    <includedby refid="ast_8cpp" local="yes">/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast.cpp</includedby>
    <includedby refid="common_8cpp" local="yes">/Users/harry.mills/Documents/Repos/Element/libelement/src/common.cpp</includedby>
    <includedby refid="instructions_8hpp" local="yes">/Users/harry.mills/Documents/Repos/Element/libelement/src/instruction_tree/instructions.hpp</includedby>
    <includedby refid="log__errors_8hpp" local="yes">/Users/harry.mills/Documents/Repos/Element/libelement/src/log_errors.hpp</includedby>
    <includedby refid="object__model__builder_8cpp" local="yes">/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/object_model_builder.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="12">
        <label>fmt/format.h</label>
      </node>
      <node id="16">
        <label>element/ast.h</label>
      </node>
      <node id="15">
        <label>instruction_tree/fwd.hpp</label>
        <link refid="instruction__tree_2fwd_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../common_internal.hpp</label>
        <link refid="common__internal_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="7">
        <label>ast_indexes.hpp</label>
        <link refid="ast__indexes_8hpp_source"/>
      </node>
      <node id="9">
        <label>map</label>
      </node>
      <node id="14">
        <label>element/common.h</label>
      </node>
      <node id="13">
        <label>element/token.h</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp</label>
        <link refid="ast__internal_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_if.hpp</label>
        <link refid="intrinsic__if_8hpp_source"/>
      </node>
      <node id="8">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_nullary.hpp</label>
        <link refid="intrinsic__nullary_8hpp_source"/>
      </node>
      <node id="3">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/lmnt/compiler.hpp</label>
        <link refid="compiler_8hpp_source"/>
      </node>
      <node id="7">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_constructor_num.hpp</label>
        <link refid="intrinsic__constructor__num_8hpp_source"/>
      </node>
      <node id="10">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_binary.hpp</label>
        <link refid="intrinsic__binary_8hpp_source"/>
      </node>
      <node id="2">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/instruction_tree/instructions.hpp</label>
        <link refid="instructions_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intermediaries/struct_instance.hpp</label>
        <link refid="struct__instance_8hpp_source"/>
      </node>
      <node id="14">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_for.hpp</label>
        <link refid="intrinsic__for_8hpp_source"/>
      </node>
      <node id="15">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_compiler_list_indexer.hpp</label>
        <link refid="intrinsic__compiler__list__indexer_8hpp_source"/>
      </node>
      <node id="6">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_constructor_bool.hpp</label>
        <link refid="intrinsic__constructor__bool_8hpp_source"/>
      </node>
      <node id="5">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_function.hpp</label>
        <link refid="intrinsic__function_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp</label>
        <link refid="ast__internal_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_list.hpp</label>
        <link refid="intrinsic__list_8hpp_source"/>
      </node>
      <node id="18">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/log_errors.hpp</label>
        <link refid="log__errors_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_list_fold.hpp</label>
        <link refid="intrinsic__list__fold_8hpp_source"/>
      </node>
      <node id="9">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_unary.hpp</label>
        <link refid="intrinsic__unary_8hpp_source"/>
      </node>
      <node id="4">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/instruction_tree/evaluator.hpp</label>
        <link refid="evaluator_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic_constructor_list.hpp</label>
        <link refid="intrinsic__constructor__list_8hpp_source"/>
      </node>
      <node id="19">
        <label>/Users/harry.mills/Documents/Repos/Element/libelement/src/object_model/intrinsics/intrinsic.hpp</label>
        <link refid="intrinsic_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structelement__ast" prot="public">element_ast</innerclass>
    <innerclass refid="structelement__parser__ctx" prot="public">element_parser_ctx</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ast__internal_8hpp_1ae80d39a7dfedce02a40f584c66e3fdfe" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="structelement__ast" kindref="compound">element_ast</ref>, void(*)(<ref refid="structelement__ast" kindref="compound">element_ast</ref> *)&gt;</type>
        <definition>using ast_unique_ptr =  std::unique_ptr&lt;element_ast, void (*)(element_ast*)&gt;</definition>
        <argsstring></argsstring>
        <name>ast_unique_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="17" column="1" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ast__internal_8hpp_1a1682027c91f93e508016616c0d057835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
        <definition>element_ast* ast_new_child</definition>
        <argsstring>(element_ast *parent, element_ast_node_type type)</argsstring>
        <name>ast_new_child</name>
        <param>
          <type><ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>element_ast_node_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="19" column="13" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast.cpp" bodystart="204" bodyend="210" declfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" declline="19" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1ae845f20d61ee67dca6843d11bdb77159" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_has_identifier</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_has_identifier</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="48" column="13" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a1826c3afb43df7cb2dbb8daeaa983266" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_has_literal</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_has_literal</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="56" column="13" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a8e6f487ef3a35496abbc1ae526de6560" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_in_function_scope</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_in_function_scope</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="62" column="13" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a28ec9ad5f2b3682c9fd2549b05857363" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_in_lambda_scope</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_in_lambda_scope</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="67" column="13" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1aea5b21811c883be1719b62c101798553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_struct_is_valid</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_struct_is_valid</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="73" column="14" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1af23b7b98cf89510a9d2a678b4d306f83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_struct_has_body</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_struct_has_body</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="78" column="14" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1ae227f948f2678f35b39bb5f0eef8aaf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
        <definition>const element_ast* ast_node_struct_get_declaration</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_struct_get_declaration</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="85" column="27" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1af1a50516d5829ae9fa4ad70f0e92d204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
        <definition>const element_ast* ast_node_struct_get_body</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_struct_get_body</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="91" column="27" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="91" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a30e95ff21146aca28082d166951935b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_function_is_valid</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_function_is_valid</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="99" column="14" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a0752b038780393ca10e8aa3a841f5c63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_function_has_body</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_function_has_body</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="104" column="14" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a74124986387c045a497b9b72dd971209" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
        <definition>const element_ast* ast_node_function_get_declaration</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_function_get_declaration</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="111" column="27" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a07de6eb75f8647cd1a3df138c347b4ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
        <definition>const element_ast* ast_node_function_get_body</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_function_get_body</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="117" column="27" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a9d57933a5fccb5fc8d5c0a7f90498da9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_declaration_is_valid</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_declaration_is_valid</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="125" column="14" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a1a33c77e74fe9a14a38c7bba1398b6f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_declaration_has_inputs</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_declaration_has_inputs</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="131" column="14" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1aa2d98b5328e546a0991bc4f734ac753c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
        <definition>const element_ast* ast_node_declaration_get_inputs</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_declaration_get_inputs</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="137" column="27" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="137" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1ab72d3ececfc99a159e9e535601d95962" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ast_node_declaration_has_outputs</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_declaration_has_outputs</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="144" column="14" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a5f72555551b3730577a3f0ffc29dcc55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
        <definition>const element_ast* ast_node_declaration_get_outputs</definition>
        <argsstring>(const element_ast *n)</argsstring>
        <name>ast_node_declaration_get_outputs</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="150" column="27" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="150" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="ast__internal_8hpp_1a5dd558542dd5a66c4d5bda8c20387fcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
        <definition>const element_ast* get_root_from_ast</definition>
        <argsstring>(const element_ast *ast)</argsstring>
        <name>get_root_from_ast</name>
        <param>
          <type>const <ref refid="structelement__ast" kindref="compound">element_ast</ref> *</type>
          <declname>ast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" line="158" column="26" bodyfile="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp" bodystart="158" bodyend="169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//STD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//SELF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ast_indexes.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../common_internal.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;element/ast.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;element/token.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ast_unique_ptr<sp/>=<sp/>std::unique_ptr&lt;<ref refid="structelement__ast" kindref="compound">element_ast</ref>,<sp/>void<sp/>(*)(<ref refid="structelement__ast" kindref="compound">element_ast</ref>*)&gt;;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast_new_child(<ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>parent,<sp/>element_ast_node_type<sp/>type);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structelement__ast" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structelement__ast" kindref="compound">element_ast</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>(<ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast_parent)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>parent(ast_parent)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>type(ELEMENT_AST_NODE_NONE)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children.reserve(20);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_value<sp/>literal<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>active<sp/>for<sp/>AST_NODE_LITERAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_ast_flags<sp/>flags;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>active<sp/>for<sp/>all<sp/>other<sp/>node<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>element_ast_node_type<sp/>type;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>identifier;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>parent<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ast_unique_ptr&gt;<sp/>children;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>element_token*<sp/>nearest_token<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_flag(element_ast_flags<sp/>flag)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="43"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>flag)<sp/>==<sp/>flag;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_has_identifier(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_DECLARATION</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>n-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_IDENTIFIER</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>n-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_CALL</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>n-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_PORT;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_has_literal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_LITERAL;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//SCOPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_in_function_scope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n-&gt;parent<sp/>&amp;&amp;<sp/>n-&gt;parent-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_SCOPE<sp/>&amp;&amp;<sp/>n-&gt;parent-&gt;parent<sp/>&amp;&amp;<sp/>n-&gt;parent-&gt;parent-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_FUNCTION);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_in_lambda_scope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n-&gt;parent<sp/>&amp;&amp;<sp/>n-&gt;parent-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_SCOPE<sp/>&amp;&amp;<sp/>n-&gt;parent-&gt;parent<sp/>&amp;&amp;<sp/>n-&gt;parent-&gt;parent-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_LAMBDA);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//STRUCT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_struct_is_valid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>&amp;&amp;<sp/>n-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_STRUCT<sp/>&amp;&amp;<sp/>n-&gt;children.size()<sp/>&gt;<sp/>ast_idx::function::declaration;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_struct_has_body(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_struct_is_valid(n));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo:<sp/>is<sp/>this<sp/>even<sp/>valid?<sp/>I<sp/>thought<sp/>structs<sp/>_must_<sp/>have<sp/>a<sp/>body,<sp/>even<sp/>if<sp/>it&apos;s<sp/>of<sp/>type<sp/>CONSTRAINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children.size()<sp/>&gt;<sp/>ast_idx::function::body;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast_node_struct_get_declaration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_struct_is_valid(n));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children[ast_idx::function::declaration].get();</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast_node_struct_get_body(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_struct_is_valid((n)));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_struct_has_body(n));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children[ast_idx::function::body].get();</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_function_is_valid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>&amp;&amp;<sp/>n-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_FUNCTION<sp/>&amp;&amp;<sp/>n-&gt;children.size()<sp/>&gt;<sp/>ast_idx::function::declaration<sp/>&amp;&amp;<sp/>n-&gt;children[ast_idx::function::declaration]-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_DECLARATION;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_function_has_body(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_function_is_valid(n));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo:<sp/>is<sp/>this<sp/>even<sp/>valid?<sp/>I<sp/>thought<sp/>functions<sp/>_must_<sp/>have<sp/>a<sp/>body,<sp/>even<sp/>if<sp/>it&apos;s<sp/>of<sp/>type<sp/>CONSTRAINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children.size()<sp/>&gt;<sp/>ast_idx::function::body;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast_node_function_get_declaration(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_function_is_valid(n));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children[ast_idx::function::declaration].get();</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast_node_function_get_body(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_function_is_valid((n)));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_function_has_body(n));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children[ast_idx::function::body].get();</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//DECLARATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_declaration_is_valid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo:<sp/>do<sp/>all<sp/>valid<sp/>declarations<sp/>have<sp/>inputs?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>&amp;&amp;<sp/>n-&gt;type<sp/>==<sp/>ELEMENT_AST_NODE_DECLARATION;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_declaration_has_inputs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_declaration_is_valid(n));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children.size()<sp/>&gt;<sp/>ast_idx::declaration::inputs;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast_node_declaration_get_inputs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_declaration_is_valid(n));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_declaration_has_inputs(n));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children[ast_idx::declaration::inputs].get();</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ast_node_declaration_has_outputs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_declaration_is_valid(n));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children.size()<sp/>&gt;<sp/>ast_idx::declaration::outputs;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast_node_declaration_get_outputs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_declaration_is_valid(n));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ast_node_declaration_has_outputs(n));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;children[ast_idx::declaration::outputs].get();</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//MISC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>get_root_from_ast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ast)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ast-&gt;parent)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ast<sp/>=<sp/>ast-&gt;parent;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ast;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="structelement__parser__ctx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structelement__parser__ctx" kindref="compound">element_parser_ctx</ref></highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;element_log_ctx&gt;<sp/>logger;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;element::source_context&gt;<sp/>src_context;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structelement__tokeniser__ctx" kindref="compound">element_tokeniser_ctx</ref>*<sp/>tokeniser<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>root<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>literal<sp/>::=<sp/>[-+]?<sp/>[0-9]+<sp/>(&apos;.&apos;<sp/>[0-9]*)?<sp/>([eE]<sp/>[-+]?<sp/>[0-9]+)?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_literal(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>identifier<sp/>::=<sp/>&apos;_&apos;?<sp/>[a-zA-Z#x00F0-#xFFFF]<sp/>[_a-zA-Z0-9#x00F0-#xFFFF]*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_identifier(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_reserved_args<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_reserved_names<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>::=<sp/>&apos;:&apos;<sp/>identifier<sp/>(&apos;.&apos;<sp/>identifier)*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_typename(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>port<sp/>::=<sp/>(identifier<sp/>|<sp/>unidentifier)<sp/>type?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_port(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>portlist<sp/>::=<sp/>port<sp/>(&apos;,&apos;<sp/>port)*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_portlist(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exprlist<sp/>::=<sp/>expression<sp/>(&apos;,&apos;<sp/>expression)*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_exprlist(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>::=<sp/>(identifier<sp/>|<sp/>literal)<sp/>(&apos;(&apos;<sp/>exprlist<sp/>&apos;)&apos;<sp/>|<sp/>&apos;.&apos;<sp/>identifier)*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_call(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lambda<sp/>::=<sp/>unidentifier<sp/>&apos;(&apos;<sp/>portlist<sp/>&apos;)&apos;<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_lambda(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expression<sp/>::=<sp/>call<sp/>|<sp/>lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_expression(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>qualifier<sp/>::=<sp/>&apos;intrinsic&apos;<sp/>|<sp/>&apos;extern&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_qualifiers(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/>element_ast_flags*<sp/>flags);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>declaration<sp/>::=<sp/>identifier<sp/>(&apos;(&apos;<sp/>portlist<sp/>&apos;)&apos;)?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>we<sp/>also<sp/>grab<sp/>an<sp/>optional<sp/>type<sp/>on<sp/>the<sp/>end<sp/>at<sp/>AST<sp/>level<sp/>for<sp/>simplicity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_declaration(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>find_return_type);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scope<sp/>::=<sp/>&apos;{&apos;<sp/>item*<sp/>&apos;}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_scope(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anonymous_block<sp/>::=<sp/>&apos;{&apos;<sp/>item*<sp/>&apos;}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_anonymous_block(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_body(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>::=<sp/>qualifier*<sp/>declaration<sp/>type?<sp/>(scope<sp/>|<sp/>statement<sp/>|<sp/>interface)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>qualifiers<sp/>parsed<sp/>further<sp/>out<sp/>and<sp/>passed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_function(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast,<sp/>element_ast_flags<sp/>declflags);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>struct<sp/>::=<sp/>qualifier*<sp/>&apos;struct&apos;<sp/>declaration<sp/>(scope<sp/>|<sp/>interface)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>qualifiers<sp/>parsed<sp/>further<sp/>out<sp/>and<sp/>passed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_struct(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast,<sp/>element_ast_flags<sp/>declflags);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_constraint(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast,<sp/>element_ast_flags<sp/>declflags);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>::=<sp/>&apos;namespace&apos;<sp/>identifier<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_namespace(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>item<sp/>::=<sp/>namespace<sp/>|<sp/>struct<sp/>|<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse_item(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>:<sp/>/^/<sp/>(&lt;item&gt;)*<sp/>/$/;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>parse(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>tindex,<sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>ast_build();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>Move<sp/>to<sp/>object<sp/>model<sp/>as<sp/>this<sp/>one<sp/>is<sp/>already<sp/>disgustingly<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>validate(<ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>validate_type(<ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>validate_portlist(<ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>validate_struct(<ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>element_result<sp/>validate_scope(<ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>ast);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>message_code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structelement__ast" kindref="compound">element_ast</ref>*<sp/>nearest_ast<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/Users/harry.mills/Documents/Repos/Element/libelement/src/ast/ast_internal.hpp"/>
  </compounddef>
</doxygen>
